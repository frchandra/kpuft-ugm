user root;
worker_processes  2;

events {
    worker_connections  2048;
    accept_mutex on;
    use epoll;
}

http {
    server_names_hash_bucket_size 128;
    access_log    /dev/stdout;
    include       mime.types;
    default_type  application/octet-stream;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;

    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # security prevention
    server_tokens off;

    # prevent host spoofing
    server {
	listen 80 default_server http2;
	return 444;
    }

    server {
	listen 443 ssl deferred http2;
	listen [::]:443 ssl deferred http2;

	index index.php index.html;

        # your application here
	server_name $hostname;

	## SSL cert
	ssl_certificate /etc/ssl-nginx/kpuftugm.crt;
	ssl_certificate_key /etc/ssl-nginx/kpuftugm.key;

	# SSL Settings
	ssl_protocols TLSv1.2;
	ssl_ciphers HIGH:!aNULL:!MD5;
	ssl_session_timeout  10m;
	ssl_session_cache shared:SSL:10m;
	ssl_session_tickets off; # Requires nginx >= 1.5.9
	#ssl_stapling on; # Requires nginx >= 1.3.7
	#ssl_stapling_verify on; # Requires nginx => 1.3.7
	resolver 1.1.1.1 1.0.0.1 valid=300s;
	resolver_timeout 5s;
	add_header X-Frame-Options DENY;
	add_header X-Content-Type-Options nosniff;
	add_header X-XSS-Protection "1; mode=block";

	# Timeout
	client_body_timeout 12;
	client_header_timeout 12;
	keepalive_timeout 15;
	send_timeout 10;

	# Disable Compression to save CPU cycles
	# we have gigabit connection anyway
	gzip off;	

	# Logging
	error_log  /var/log/nginx/error.log;
	access_log /var/log/nginx/access.log;

        # this should be the path of your public folder in laravel which from our dockerfile it would be /var/www/public
	root /var/www/public;

		location ~* .(jpg|jpeg|png|gif|ico|css|js)$ {
			expires 365d;
		}

		location ~ \.php$ {
			try_files $uri =404;
			fastcgi_split_path_info ^(.+\.php)(/.+)$;
			fastcgi_pass 127.0.0.1:9000;
			fastcgi_index index.php;
			include fastcgi_params;
			fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
			fastcgi_param PATH_INFO $fastcgi_path_info;
			fastcgi_buffering off;
		}

		location / {
			try_files $uri $uri/ /index.php?$query_string;
			gzip_static on;
		}
    }

    # redirect clients from HTTP to HTTPS
    server {
	listen 80 http2;
	server_name $hostname;
	return 301 https://$server_name$request_uri;
    }
}
